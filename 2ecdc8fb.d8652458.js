(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{62:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return i})),n.d(e,"metadata",(function(){return s})),n.d(e,"rightToc",(function(){return c})),n.d(e,"default",(function(){return l}));var a=n(2),o=n(6),r=(n(0),n(73)),i={title:"Transactions & history",sidebar_label:"Transactions & history"},s={unversionedId:"transactions",id:"transactions",isDocsHomePage:!1,title:"Transactions & history",description:"Visly State has support for both transactions and history. Transactions allow you to group multiple mutations into a single mutation to ensure components aren't re-rendered before all mutations are run, and history enables you to add undo / redo capabilities to your app with a single line of code. Transactions work together with the history api to ensure all mutations within a transaction are undone / redone as a single operation.",source:"@site/docs/transactions.md",slug:"/transactions",permalink:"/docs/transactions",editUrl:"https://github.com/vislyhq/visly-state/edit/master/website/docs/transactions.md",version:"current",sidebar_label:"Transactions & history",sidebar:"docs",previous:{title:"Mutations",permalink:"/docs/mutations"},next:{title:"Testing",permalink:"/docs/testing"}},c=[{value:"Transactions",id:"transactions",children:[]},{value:"History",id:"history",children:[]}],u={rightToc:c};function l(t){var e=t.components,n=Object(o.a)(t,["components"]);return Object(r.b)("wrapper",Object(a.a)({},u,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Visly State has support for both transactions and history. Transactions allow you to group multiple mutations into a single mutation to ensure components aren't re-rendered before all mutations are run, and history enables you to add undo / redo capabilities to your app with a single line of code. Transactions work together with the history api to ensure all mutations within a transaction are undone / redone as a single operation."),Object(r.b)("h2",{id:"transactions"},"Transactions"),Object(r.b)("p",null,"Transactions quickly become necesarry in larger applications where you have your mutation logic split across many mutation functions but want to ensure components only re-render a single time independent of how many mutations you combine. Just wrap app mutations calls in a ",Object(r.b)("inlineCode",{parentName:"p"},"transaction"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { useMutation, transaction } from '@visly/state`\nimport { appState, mutations } from './state`\n\nfunction Component() {\n    const mutation1 = useMutation(appState, mutations.one)\n    const mutation2 = useMutation(appState, mutations.two)\n    const mutation3 = useMutation(appState, mutations.three)\n\n    const onClick = () => {\n        transaction(appState, () => {\n            mutation1()\n            mutation2()\n            mutation3()\n        })\n    }\n\n    return <button onClick={onClick}>Perform transaction</button>\n}\n")),Object(r.b)("p",null,"When using transactions outside of React, for example in a Node.js application, you can instead call the ",Object(r.b)("inlineCode",{parentName:"p"},".transaction()")," method on the state container. Make sure you don't use this from React as it won't ensure component re-renders don't trigger multiple times."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { appState, mutations } from './state`\n\nappState.transaction(() => {\n    appState.set(mutations.one)\n    appState.set(mutations.two)\n    appState.set(mutations.three)\n})\n")),Object(r.b)("h2",{id:"history"},"History"),Object(r.b)("p",null,"The history api allows you to implement undo & redo functionality in your application with a single line of code. Just import the ",Object(r.b)("inlineCode",{parentName:"p"},"undo")," and ",Object(r.b)("inlineCode",{parentName:"p"},"redo")," function in your react app and call them based on some user interaction such as a button click. This will undo / redo the latest mutation or transaction in an effecient way. Just like mutations, this will only re-render the components which were effected by the changes to the history. Visly State stores historical state in a compact and efficient way making it possible to have a near infinite history stack."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { undo, redo } from '@visly/state`\nimport { appState } from './state`\n\nfunction Component() {\n    return (\n        <div>\n            <button onClick={() => undo(appState)}>Undo</button>\n            <button onClick={() => redo(appState)}>Redo</button>\n        </div>\n    )\n}\n")),Object(r.b)("p",null,"Much like with transactions, in a Node environment you will want to call the ",Object(r.b)("inlineCode",{parentName:"p"},".undo()")," and ",Object(r.b)("inlineCode",{parentName:"p"},".redo()")," method on the state object instead. Which these functions work in a react environment as well, they won't ensure the most eficient component re-renders."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { appState } from './state`\n\nappState.undo()\nappState.redo()\n")))}l.isMDXComponent=!0},73:function(t,e,n){"use strict";n.d(e,"a",(function(){return p})),n.d(e,"b",(function(){return b}));var a=n(0),o=n.n(a);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var u=o.a.createContext({}),l=function(t){var e=o.a.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},p=function(t){var e=l(t.components);return o.a.createElement(u.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return o.a.createElement(o.a.Fragment,{},e)}},d=o.a.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,i=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),p=l(n),d=a,b=p["".concat(i,".").concat(d)]||p[d]||m[d]||r;return n?o.a.createElement(b,s(s({ref:e},u),{},{components:n})):o.a.createElement(b,s({ref:e},u))}));function b(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var u=2;u<r;u++)i[u]=n[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);